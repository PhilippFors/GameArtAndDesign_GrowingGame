using UnityEngine;
using UnityEngine.SceneManagement;
using System.Collections;
using UnityStandardAssets.Characters.FirstPerson;

public class GameManager : MonoBehaviour 
{
	public CharacterController m_character;
	public string m_gameScene;
	public Animation m_introAnimation;

    void Start()
    {
        SetState(GameState.start);
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.Escape))
        {
            Application.Quit();
        }
    }

    void RestartGame()
    {
        SceneManager.LoadScene(m_gameScene);
    }

    void EnableCharacter(bool enable)
    {
        m_character.enabled = enable;
        m_character.GetComponent<FirstPersonController>().enabled = enable;
        m_character.GetComponentInChildren<LookAtInteraction>().enabled = enable;
        if (enable)
            Cursor.lockState = CursorLockMode.Locked;
        else
            Cursor.lockState = CursorLockMode.None;
    }

    #region State Machine

    public enum GameState { undefined, start, main, gameOver, gameWon, restart };

	GameState m_gameState = GameState.undefined;

	void SetState (GameState theState)
	{
		switch(theState)
		{
			case GameState.start:
                m_character.gameObject.SetActive(false);
                m_introAnimation.gameObject.SetActive(true);
				m_introAnimation.Play();
				StartCoroutine(SetStateDelayed(m_introAnimation.clip.length, GameState.main));
				break;
			case GameState.main:
                m_character.gameObject.SetActive(true);
                m_introAnimation.gameObject.SetActive(false);
                break;
            case GameState.gameOver:
				SetState(GameState.restart);
				break;
			case GameState.gameWon:
				EnableCharacter(false);
				GetComponent<AudioSource>().Play();
				StartCoroutine(SetStateDelayed(GetComponent<AudioSource>().clip.length, GameState.restart));
				break;
			case GameState.restart:
				RestartGame();
				break;
		}

        Debug.Log(theState);
		m_gameState = theState;
	}

    // Coroutine, that will set the game state with a delay
    IEnumerator SetStateDelayed (float delayTime, GameState state)
	{
		yield return new WaitForSeconds(delayTime);

		SetState(state);
	}

	#endregion

	#region Main State

	int collectedObjects = 0;

	public void CollectObject (GameObject obj, float size = 1f)
	{
		collectedObjects++;

        // if there's an object previer in the scene, pause and look at his object.
        if(CloseUpObjectPreview.instance != null)
        {
            EnableCharacter(false);
            CloseUpObjectPreview.instance.ShowPreview(obj, size);
        }
	}

	public void OnClosePreview ()
	{
		EnableCharacter(true);

		if(collectedObjects == 3)
		{
			StartCoroutine(SetStateDelayed(1f, GameState.gameWon));
		}
	}

	public void OnDeathTriggerEnter ()
	{
		SetState(GameState.gameOver);
	}

	#endregion

	#region Accessing the object

	// Kind of like a Singleton. Easy way to access MonoBehaviors that only exist once in a game. 
	public static GameManager instance;

	// Awake() is like Start() but will be called earlier. See https://docs.unity3d.com/Manual/ExecutionOrder.html
	void Awake ()
	{
		GameManager.instance = this;
	}

	#endregion
}
